#include "DHT.h"
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ACROBOTIC_SSD1306.h>
#include <EEPROM.h>
#include <SPI.h>
#define DHT11Pin 2
DHT dht;
int counter = 0;
bool sendData = false;
const int buttonOkPin = A2; 
const int buttonLeftPin = A1; 
const int buttonRightPin = A3; 

float returnVoltage = 0.0;
int MenuState = 0;

//SoftwareSerial espSerial(5, 6);
//DHT dht(DHTPIN, DHTTYPE);
byte tempDHT = 0;
byte humDHT = 0;
int maxtempaddr = 0;
int mintempaddr = 1;
int maxhumaddr = 2;
int buttonState = 0;
char cstr[16];

byte maxtemp = EEPROM.read(maxtempaddr);
byte mintemp = EEPROM.read(mintempaddr);
byte maxhum = EEPROM.read(maxhumaddr);

int heater = 5;
int vent = 6;

static const unsigned char PROGMEM heater_on[] =
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x60, 0xFC, 0xFE, 0xFE, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xFC,
0xFE, 0xFE, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xDE, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xEF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3,
0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC3, 0xFF, 0xFF, 0x7F, 0x18, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0,
0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0xC1, 0x81, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0,
0x81, 0x81, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xC0, 0x81, 0xC1, 0xC0, 0xE0, 0xE0, 0xE0,
0xE0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0x03,
0x01, 0x00, 0x00, 0x01, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0xFF,
0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0x00, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x01, 0x00,
0x00, 0x01, 0x03, 0xFF, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x1F, 0x3F, 0x7C,
0x78, 0x70, 0x70, 0x78, 0x78, 0x7F, 0x7F, 0x7F, 0x7F, 0x7C, 0x78, 0x70, 0x70, 0x78, 0x78, 0x7F,
0x7F, 0x7F, 0x7F, 0x78, 0x78, 0x70, 0x70, 0x78, 0x7C, 0x7F, 0x7F, 0x7F, 0x7F, 0x78, 0x78, 0x70,
0x70, 0x78, 0x7C, 0x3F, 0x1F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM vent_on[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
0x70, 0x18, 0x08, 0x0C, 0x0C, 0x0C, 0x0C, 0x08, 0x08, 0x08, 0x18, 0x10, 0x10, 0x30, 0x20, 0x60,
0x40, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x80, 0xC0, 0x60, 0x30, 0x10, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7E, 0x03,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x18, 0x10,
0x30, 0x60, 0xC0, 0x81, 0x03, 0x06, 0x0C, 0x78, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x10, 0xD8, 0x78, 0x1C, 0x0E, 0x0B,
0x89, 0xE8, 0x38, 0x18, 0x1C, 0x36, 0x03, 0x01, 0x01, 0x00, 0x00, 0x80, 0xC0, 0x7F, 0x70, 0x60,
0x20, 0x20, 0x20, 0x20, 0x60, 0x40, 0x40, 0xC0, 0x80, 0x00, 0x00, 0x01, 0x01, 0x03, 0x06, 0x0C,
0x18, 0x30, 0xE0, 0x81, 0x03, 0x06, 0x9C, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xF0, 0xFE, 0x07, 0x01, 0x00, 0x00, 0xF8, 0x1F, 0x01, 0x00, 0x00, 0xF0, 0x1E,
0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x78, 0x0C, 0x06, 0x01, 0xC1, 0xE0, 0x30, 0x18, 0x0C,
0x0C, 0x04, 0x04, 0x0C, 0x0C, 0x18, 0x30, 0xE0, 0xC1, 0x01, 0x06, 0x0C, 0x78, 0xC0, 0x00, 0x00,
0x00, 0x00, 0x18, 0x0B, 0x3E, 0xF6, 0x03, 0x00, 0x01, 0x1F, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x3F, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x78, 0xC0, 0x80, 0x00, 0x0F, 0x1C, 0x30, 0x60, 0xC0,
0xC0, 0x80, 0x80, 0xC0, 0xC0, 0x60, 0x30, 0x1C, 0x0F, 0x00, 0x80, 0xC0, 0x78, 0x0F, 0x08, 0x18,
0x10, 0x30, 0x20, 0x60, 0xC0, 0x83, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x03, 0x1E, 0x70, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0xC0, 0xC0, 0x40, 0x60, 0x20, 0x30, 0x10, 0x18, 0x08, 0x0D, 0x06, 0x06, 0x0C, 0x08, 0x08, 0x18,
0x10, 0x10, 0x10, 0x10, 0x18, 0x08, 0x08, 0x0C, 0x06, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x06, 0x0C, 0x18, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0xC0, 0x86, 0x84, 0x0C, 0x08, 0x08, 0x1E, 0x7E, 0xD0,
0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x08, 0x08, 0x0C, 0x84, 0x86, 0xC0, 0x40, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0x60, 0x30, 0x18, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x02, 0x03,
0x03, 0x06, 0x0E, 0x1A, 0x12, 0x32, 0x23, 0x23, 0x21, 0x21, 0x21, 0x20, 0x20, 0x30, 0x10, 0x18,
0x08, 0x0C, 0x04, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM nothing[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x0E, 0x1B, 0x1D, 0x15, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x1F, 0xF5, 0xFD, 0x1F,
0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x01,
0x03, 0x0E, 0x0C, 0x0C, 0x0C, 0x0E, 0x1B, 0xF5, 0xF5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x1E, 0x1A, 0xFF, 0xFF, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x3F, 0x3F, 0x1E,
0x0C, 0x00, 0x00, 0x00, 0x1E, 0x32, 0xFF, 0xF2, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x33, 0xFF,
0x33, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x3F, 0x3F, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x1E, 0xF2,
0xFF, 0x32, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x1C, 0x3E, 0x2A, 0x2A, 0x3E, 0x1C, 0x0C, 0x0C, 0x0C, 0x3E, 0xEA, 0xEA, 0x7E, 0x7E,
0x7E, 0x44, 0x44, 0x44, 0xC6, 0x0F, 0x0F, 0x0E, 0x08, 0x08, 0x98, 0x98, 0x9E, 0xFA, 0xFA, 0xF6,
0xFC, 0xF8, 0xF8, 0x18, 0x1C, 0x16, 0x03, 0x27, 0x3C, 0x20, 0x20, 0x20, 0x1C, 0x36, 0x2A, 0xEA,
0x7E, 0xD8, 0x98, 0x18, 0x18, 0xBC, 0xEE, 0xFA, 0xB6, 0x9C, 0x00, 0x00, 0x00, 0x1C, 0x32, 0x2F,
0x32, 0x1E, 0x00, 0x00, 0xE0, 0xFC, 0xF6, 0xEA, 0xAA, 0x3E, 0x1C, 0x0C, 0x0C, 0x0C, 0x1C, 0x37,
0x3B, 0x26, 0x3C, 0x00, 0x00, 0x00, 0x1C, 0x36, 0xFA, 0xEE, 0xFC, 0xF8, 0x18, 0x18, 0x18, 0x3E,
0xEA, 0xEA, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x77, 0x7F, 0x3C, 0x3C,
0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x3C, 0xFF, 0xFF, 0x3C,
0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFC, 0xF8, 0xC8, 0x08, 0x0E, 0x00, 0x00, 0x40,
0xC0, 0xE1, 0xFB, 0x7F, 0x1C, 0xFF, 0xFF, 0x07, 0x07, 0x07, 0x07, 0xFF, 0xFF, 0x3C, 0x24, 0x7E,
0x6E, 0x3C, 0x18, 0x18, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x03, 0x0E, 0x1C, 0x38, 0x60, 0xFC, 0xAE,
0x3A, 0xB6, 0x7C, 0x38, 0x18, 0x0C, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x18, 0x3C,
0x2B, 0x3B, 0x3E, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x64, 0xDC, 0x64, 0x3C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xF4, 0xDC, 0x7C, 0x38,
0x18, 0x18, 0x18, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x7C, 0x57, 0x5F, 0x7C,
0xFF, 0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0xFF, 0x7C, 0x01, 0x07, 0x0F, 0x3E, 0x78, 0xF0, 0xF0,
0xF0, 0xF1, 0xF2, 0xFC, 0x70, 0x7F, 0xFF, 0xF0, 0x78, 0x38, 0x38, 0x1F, 0x1F, 0x3C, 0x64, 0x5E,
0x64, 0x3C, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x58, 0x6C, 0x3C, 0x60, 0xE0, 0xC0, 0x80, 0xC1,
0xE1, 0x78, 0x7C, 0x04, 0x00, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x10, 0x3C,
0xF4, 0xDE, 0x6C, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x64, 0x7E, 0x64, 0x3C, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4C, 0x77, 0x4C, 0x78, 0x30,
0x30, 0x30, 0x38, 0x6C, 0x54, 0x54, 0x7C, 0x30, 0x30, 0x30, 0x30, 0x78, 0xD7, 0xD7, 0x6C, 0x38,
0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0xFC, 0xFE, 0x7E, 0x7F, 0x7F, 0x38, 0x7C, 0xD4, 0xD4, 0x7C,
0x3F, 0x1F, 0x0F, 0x0F, 0x3F, 0x0F, 0x07, 0x0F, 0x38, 0x30, 0x30, 0x30, 0x38, 0x6C, 0x75, 0x5D,
0x7D, 0x30, 0x30, 0x30, 0x30, 0x7C, 0xD7, 0xF7, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x78, 0x4C, 0x74,
0x4C, 0x78, 0x18, 0x18, 0x19, 0x39, 0x6D, 0xD4, 0xD4, 0x7C, 0x10, 0x00, 0x00, 0x01, 0x39, 0x4F,
0x77, 0x6C, 0x38, 0x30, 0x30, 0x31, 0x39, 0x6D, 0x75, 0x5D, 0x79, 0x31, 0x30, 0x30, 0x30, 0x7C,
0xD7, 0xD7, 0x7C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x30, 0x78, 0xFC, 0xFC, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0xCF, 0xFF, 0x48, 0x78,
0x00, 0x00, 0x00, 0x78, 0xCD, 0xFC, 0xCC, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0xFF, 0xFF, 0x78,
0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xFC, 0xFC,
0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0xFF, 0xFF, 0x78, 0x30, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC,
0x4C, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0xFF, 0xFF, 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x58, 0xFC, 0xFC, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78,
0xDF, 0xFF, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x70, 0xDF, 0xBF, 0xA8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xCF, 0xBF,
0xE8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM sendingUno[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60,
0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x1E, 0x3E, 0x3E,
0x76, 0x76, 0x76, 0xE6, 0xE6, 0xE6, 0xC6, 0x86, 0x86, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x86, 0x86, 0x86,
0xC6, 0xC6, 0xE6, 0xE6, 0xE6, 0x76, 0x76, 0x7E, 0x3E, 0x1E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC,
0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0E, 0x0E, 0x0E, 0x1C,
0x1C, 0x38, 0x38, 0x78, 0x70, 0x70, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xE0,
0xE0, 0x70, 0x70, 0x70, 0x38, 0x38, 0x1C, 0x1C, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x03, 0x03,
0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07,
0x0E, 0x0E, 0x0C, 0x1C, 0x1C, 0x0E, 0x0E, 0x0F, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x3F, 0x3F, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const unsigned char PROGMEM sendingDue[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60,
0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x1E, 0x3E, 0x3E,
0x76, 0x76, 0x76, 0xE6, 0xE6, 0xE6, 0xC6, 0x86, 0x86, 0x86, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x86, 0x86, 0x86,
0xC6, 0xC6, 0xE6, 0xE6, 0xE6, 0x76, 0x76, 0x7E, 0x3E, 0x1E, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0E, 0x0E, 0x0E, 0x1C,
0x1C, 0x38, 0x38, 0x78, 0x70, 0x70, 0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0xE0,
0xE0, 0x70, 0x70, 0x70, 0x38, 0x38, 0x1C, 0x1C, 0x1E, 0x0E, 0x0E, 0x07, 0x07, 0x07, 0x03, 0x03,
0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07,
0x0E, 0x0E, 0x0C, 0x1C, 0x1C, 0x0E, 0x0E, 0x0F, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};



byte y = 0;
bool statusChanged = true;
void setup()
{
  pinMode(buttonOkPin, INPUT);
  pinMode(buttonLeftPin, INPUT);
  pinMode(buttonRightPin, INPUT);
  pinMode(heater, OUTPUT);
  pinMode(vent, OUTPUT);

  Serial.begin(9600);
  //espSerial.begin(9600);
  dht.setup(DHT11Pin);
  Wire.begin(1);  
  Wire.onReceive(receiveEvent);
  oled.init(); // Initialze SSD1306 OLED display
  oled.sendCommand(0xA1);            //SEGREMAP   Mirror screen horizontally (A0)
  oled.sendCommand(0xC8);            //COMSCANDEC Rotate screen vertically (C0)
  oled.sendCommand(0xDA);            //0xDA
  oled.sendCommand(0x12);            //COMSCANDEC
}

void loop()
{
    delay(200);
    standBy();
    delay(100);
}

void standBy(){
  bool drawn = false;
  int imgToShow = 0;
  int oldImgToShow = imgToShow;
  int countTime = 0;
  MenuState = 0;
  while(MenuState == 0 ){
    countTime++;
    buttonState = digitalRead(buttonOkPin);
    if(drawn == false || oldImgToShow != imgToShow){
      oled.clearDisplay();
      draw(imgToShow);
      drawn = true;
      oldImgToShow = imgToShow;
      delay(200);
    }
    if (buttonState == 1)
        {
            delay(100);
            testMenu();
            MenuState = 0;
            drawn = false;
        }else if(countTime >= 100){
          countTime = 0;
          imgToShow = processData();
        }else{
          delay(10);
        }
      if(digitalRead(buttonRightPin) && digitalRead(buttonLeftPin))
      {
        demo();
        drawn= false;
        counter++;
        delay(1000);
      }
  }
}

void demo(){
    readSensor();
    byte h = humDHT+10;
    byte tH = tempDHT+10;
    byte tL = tempDHT-10;
    Serial.println(tH);
    EEPROM.write(maxtempaddr, tH);
    EEPROM.write(mintempaddr, tL);
    EEPROM.write(maxhumaddr, h);
    maxtemp = EEPROM.read(maxtempaddr);
    mintemp = EEPROM.read(mintempaddr);
    maxhum = EEPROM.read(maxhumaddr);
    oled.clearDisplay();              // Clear screen
    oled.drawBitmap(nothing, 1024);
    delay(500);
    oled.clearDisplay();
    oled.drawBitmap(vent_on, 1024);
    delay(500);
    oled.clearDisplay();
    oled.drawBitmap(heater_on, 1024);
    delay(500);
    oled.clearDisplay();
    oled.drawBitmap(sendingUno, 1024);
    delay(500);
    sendData = true;
    delay(500);
    processData();
}

void testMenu(){
  bool drawn = false;
  int countTime = 0;
  while(MenuState < 5){
    countTime++;
    if(countTime >= 500){
      MenuState = 6;   
    }else{
      delay(10);
      }
    buttonState = digitalRead(buttonOkPin);
    if (buttonState == 1)
        {
            delay(100);
            MenuState++;
            drawn = false;
            countTime = 0;
        }
      if (MenuState == 1)
      {
        if(drawn == false){
          oled.clearDisplay();
          oled.setTextXY(0,0); 
          oled.putString("SET UP:");
          oled.setTextXY(1,0); 
          oled.putString("Menu for setting up");
          oled.setTextXY(2,0); 
          oled.putString("max. and min. temp.");
          oled.setTextXY(3,0); 
          oled.putString("and max. humidity.");
          drawn = true;
          }
      }
      if (MenuState == 2)
        {
          if(maxtemp > 50 || maxtemp < 0){
            maxtemp = 25;
          }
          if(drawn == false){
            oled.clearDisplay();                          // 1:1 pixel
            oled.setTextXY(0,0);                            // Start at top-left corner
            oled.putString("MAX.TEMP:");
            oled.setTextXY(1,0);
            oled.setTextXY(2,0);
            oled.putString("   0 - 50 C");
            oled.setTextXY(3,0);
            oled.putString("");
            oled.setTextXY(4,0);
            oled.putString("  ");
            oled.setTextXY(5,0);
            oled.putString(itoa(maxtemp, cstr, 10));
            oled.setTextXY(6,0);
            oled.putString(" C");
            drawn = true;
          }
            if (digitalRead(buttonRightPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (maxtemp < 50)
                {
                    maxtemp++;
                }
                oled.setTextXY(5,0);
            oled.putString(itoa(maxtemp, cstr, 10));
            }
            if (digitalRead(buttonLeftPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (maxtemp > 0)
                {
                    maxtemp--;
                }
                oled.setTextXY(5,0);
            oled.putString(itoa(maxtemp, cstr, 10));
            }
        }
        if (MenuState == 3)
        {
          if(mintemp > 40 || mintemp < 0){
            mintemp = 25;
          }
          if(drawn == false){
            EEPROM.write(maxtempaddr, maxtemp);
            oled.clearDisplay();                          // Start at top-left corner
            oled.setTextXY(0,0);
            oled.putString("MIN.TEMP:");
            oled.setTextXY(1,0);
            oled.putString("   0 - 40 C");
            oled.setTextXY(2,0);
            oled.putString("");
            oled.setTextXY(3,0);
            oled.putString("  ");
            oled.setTextXY(4,0);
            oled.putString(itoa(mintemp, cstr, 10));
            oled.setTextXY(5,0);
            oled.putString(" C");
            drawn = true;
          }
            if (digitalRead(buttonRightPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (mintemp < 40)
                {
                    mintemp++;
                }
                oled.setTextXY(4,0);
            oled.putString(itoa(mintemp, cstr, 10));
            }
            if (digitalRead(buttonLeftPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (mintemp > 0)
                {
                    mintemp--;
                }
                oled.setTextXY(4,0);
            oled.putString(itoa(mintemp, cstr, 10));
            }
        }
        if (MenuState == 4)
        {
          if(maxhum > 99 || maxhum < 0){
            maxhum = 50;
          }
          if(drawn == false){
            EEPROM.write(mintempaddr, mintemp);
            oled.clearDisplay();
            oled.setTextXY(0,0);
            oled.putString("MAX. HUM:");
            oled.setTextXY(1,0);
            oled.putString("   30 - 99 %");
            oled.setTextXY(2,0);
            oled.putString("");
            oled.setTextXY(3,0);
            oled.putString("  ");
            oled.setTextXY(4,0);
            oled.putString(itoa(maxhum, cstr, 10));
            oled.setTextXY(5,0);
            oled.putString(" %");
            drawn = true;
          }
            if (digitalRead(buttonRightPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (maxhum < 99)
                {
                    maxhum++;
                }
                oled.setTextXY(4,0);
            oled.putString(itoa(maxhum, cstr, 10));
            }
            if (digitalRead(buttonLeftPin) == 1)
            {
              countTime = 0;
                delay(200);
                if (maxhum > 30)
                {
                    maxhum--;
                }
                oled.setTextXY(4,0);
            oled.putString(itoa(maxhum, cstr, 10));
            }
        }
        if (MenuState == 5)
        {
          if(drawn == false){
            EEPROM.write(maxhumaddr, maxhum);
            drawn = true;
          }
          oled.clearDisplay();
            oled.putString("          ");
            oled.putString(" SETTINGS ");
            oled.putString("  SAVED!  ");
            oled.putString("          ");
            delay(700);
            oled.clearDisplay();
            oled.putString("          ");
            oled.putString(" SETTINGS ");
            oled.putString("  SAVED!  ");
            oled.putString("          ");
            delay(700);
            MenuState++;
        }
  }
}

void draw(int imageToShow){
  switch(imageToShow){
    case 1:
      drawHeaterOn();
      break;
    case 2: 
      drawCoolerOn();
      break;
    case 3: 
      drawSending();
      break;
    default:
      drawCompanyLogo();          
  }
}

void drawCompanyLogo(){
  oled.drawBitmap(nothing, 1024);
}

void drawHeaterOn(void)
{
    oled.drawBitmap(heater_on, 1024);
}

void drawCoolerOn(void)
{
    oled.drawBitmap(vent_on, 1024);
}

void drawSending(void)
{
    oled.drawBitmap(sendingUno, 1024);
}

int processData()
{
  Serial.println(String("VentStatus: ")+String(digitalRead(vent)));
    readSensor();
    bool heaterStatus = digitalRead(heater);
    bool ventStatus = digitalRead(vent);
    String poruka, poruka2 = "";
    String str = "";
    bool vlaga = false;
    int imgToShow = 0;
    poruka2 = "H:" + String(humDHT) + "%   T:" + String(tempDHT) + "C";
    if (isnan(humDHT) || isnan(tempDHT))
    {
        poruka2 = "DHT error!";
    }
    if (humDHT < 80)
    {
        poruka = " Dry, OK !";
    }
    if (humDHT >= 80 && humDHT < 100)
    {
        poruka = "Moisture !";
    }
    if (humDHT >= 100)
    {
        poruka = " ! WATER !";
    }
    
    /*if (humDHT > maxhum)//Provjeriti što se dešava u ovom slučaju
    {
        digitalWrite(grijac, HIGH);
        Serial.println("HEATON");
        digitalWrite(ventilator,HIGH);  
        Serial.println("VENTON");
        
        //drawHeaterOn();
        //drawCoolerOn();
        vlaga = true;
    }*/

    if (humDHT <= maxhum)
    {
      vlaga = false;
    }


    if (tempDHT < mintemp &&  vlaga == false)
    {
        imgToShow = 1;
        if (digitalRead(heater)==0)
        {
          digitalWrite(heater, HIGH);
          Serial.println("HEATON");
        }
    }
    if (tempDHT >= mintemp &&  vlaga == false)
    {
      imgToShow = 0;
      if (digitalRead(heater) == 1)
      {
          digitalWrite(heater, LOW);
          Serial.println("HEATOFF");  
      }
    }
    if (tempDHT > maxtemp && vlaga == false)
    {
        imgToShow = 2;
        if (digitalRead(vent)==0){
          digitalWrite(vent,HIGH);  
          Serial.println("VENTON");
        }
    }
    if (tempDHT <= maxtemp && vlaga == false)
    {
      imgToShow = 0;
        if (digitalRead(vent)==1){
        digitalWrite(vent,LOW);  
        Serial.println("VENTOFF");
        }
    }
    Serial.print("H: ");
    Serial.print(humDHT);
    Serial.print("% ");
    Serial.print(" T: ");
    Serial.print(tempDHT);
    Serial.println("C");
    Serial.println(String("VentStatus: ")+String(digitalRead(vent)));
    if(sendData || heaterStatus != digitalRead(heater) || ventStatus != digitalRead(vent)){
      //String tempStr = String("coming from arduino: ")+String("H= ")+String(humDHT)+String("T= ")+String(tempDHT)+String(poruka)+String(poruka2);
      byte toSend[6] = {digitalRead(heater), digitalRead(vent), vlaga, tempDHT, humDHT, sendData};
      //espSerial.println(tempStr);
      Wire.beginTransmission(0);
      for(int i = 0; i < 6;i++){
        Wire.write(toSend[i]);
      }
      Wire.endTransmission();
      imgToShow = 3;
      sendData = false;
    }
    
    return imgToShow;
 }



void readSensor()
{
  // Make sure we don't poll the sensor too often
  // - Max sample rate DHT11 is 1 Hz   (duty cicle 1000 ms)
  // - Max sample rate DHT22 is 0.5 Hz (duty cicle 2000 ms)
  unsigned long startTime = millis();

  // Request sample

  digitalWrite(DHT11Pin, LOW); // Send start signal
  pinMode(DHT11Pin, OUTPUT);
  delay(18);

  pinMode(DHT11Pin, INPUT);
  digitalWrite(DHT11Pin, HIGH); // Switch bus to receive data

  // We're going to read 83 edges:
  // - First a FALLING, RISING, and FALLING edge for the start bit
  // - Then 40 bits: RISING and then a FALLING edge per bit
  // To keep our code simple, we accept any HIGH or LOW reading if it's max 85 usecs long

  uint16_t rawHumidity = 0;
  uint16_t rawTemperature = 0;
  uint16_t data = 0;

  for ( int8_t i = -3 ; i < 2 * 40; i++ ) {
    byte age;
    startTime = micros();

    do {
      age = (unsigned long)(micros() - startTime);
      if ( age > 90 ) {
        //error = ERROR_TIMEOUT;
        return;
      }
    }
    while ( digitalRead(DHT11Pin) == (i & 1) ? HIGH : LOW );

    if ( i >= 0 && (i & 1) ) {
      // Now we are being fed our 40 bits
      data <<= 1;

      // A zero max 30 usecs, a one at least 68 usecs.
      if ( age > 30 ) {
        data |= 1; // we got a one
      }
    }

    switch ( i ) {
      case 31:
        rawHumidity = data;
        break;
      case 63:
        rawTemperature = data;
        data = 0;
        break;
    }
  }

  if ( (byte)(((byte)rawHumidity) + (rawHumidity >> 8) + ((byte)rawTemperature) + (rawTemperature >> 8)) != data ) {
    //error = ERROR_CHECKSUM;
    return;
  }

  // Store readings

  humDHT = rawHumidity >> 8;
  tempDHT = rawTemperature >> 8;
}

void receiveEvent(int howMany)
{
  int x = Wire.read();       // recibe el último byte como número
  sendData = true;
  Serial.println("YES SIR");         // imprime el número
}

 
